package icrash.environment.operations.actCoordinator.outactCoordinator.oeSendPoliceReport {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.environment

	Operation Model {

		operation: icrash.environment.actCoordinator.outactCoordinator.oeSendPoliceReport(AdtReport:dtReport):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
		
			preP {
			    /* PreP01 */
				self.rnActor.rnSystem.vpStarted = true
				/* PreP02 */	
				self.rnActor.rnctAuthenticated.vpIsLogged = true 
			}
			
			preF {
				/* PreF01 */
				let
					TheSystem : ctState,
					TheActCoordinator : actCoordinator,
					TheHandledCrises : Set(ctCrisis)
				in
					TheSystem = self.rnActor.rnSystem 
					TheActCoordinator = self.rnActor 
					TheHandledCrises =  TheActCoordinator.rnHandled 
					TheHandledCrises -> exists (c : ctCrisis | c.id = AdtReport.crisisId)
			}
			
			
			postF {
				let
					TheActCoordinator : actCoordinator,
					ThePoliceHeadQuarters : Set(ctPoliceHeadquarter),
					TheHandledCrises : Set(ctCrisis),
					ReportedCrisis : Set(ctCrisis)
				in
					TheActCoordinator = self.rnActor
					ThePoliceHeadQuarters = self.rnActor.rnSystem.rnctPoliceHeadquarter
					TheHandledCrises =  TheActCoordinator.rnHandled 
					ReportedCrisis = TheHandledCrises -> select (c : ctCrisis | c.id = AdtReport.crisisId)
					/* PostF02 */
					ReportedCrisis -> forAll (c : ctCrisis | c.vpReported = true)
			}
			
			postP {true}
			
		}
	}
}
