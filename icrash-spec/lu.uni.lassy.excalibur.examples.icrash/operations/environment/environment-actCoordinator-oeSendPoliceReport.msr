package icrash.environment.operations.actCoordinator.outactCoordinator.oeSendPoliceReport {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar
import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.environment

	Operation Model {

		operation: icrash.environment.actCoordinator.outactCoordinator.oeSendPoliceReport(AdtReport:dtReport):ptBoolean{
		// include below the specification information (pre,post or ocl or prolog)
		
			preP {
			    /* PreP01 */
				self.rnActor.rnSystem.vpStarted = true
				/* PreP02 */	
				self.rnActor.rnctAuthenticated.vpIsLogged = true 
			}
			
			preF {
				/* PreF01 */
				let
					TheSystem : ctState,
					TheCrises : Set(ctCrisis)
				in
					TheSystem = self.rnActor.rnSystem 
					TheCrises = TheSystem.rnctCrisis
					TheCrises -> exists (c : ctCrisis | c.id = AdtReport.crisisId)
			}
			
			postF {
				let
					TheActCoordinator : actCoordinator,
					ThePoliceHeadquarters : Set(ctPoliceHeadquarter),
					NearPoliceHeadquarters : Set(ctPoliceHeadquarter),
					TheHandledCrises : Set(ctCrisis),
					ReportedCrises : Set(ctCrisis),
					TheReportedCrisis : ctCrisis
				in
					TheActCoordinator = self.rnActor
					ThePoliceHeadquarters = self.rnActor.rnSystem.rnctPoliceHeadquarter
					TheHandledCrises =  TheActCoordinator@post.rnHandled 
					ReportedCrises = TheHandledCrises -> select (c : ctCrisis | c.id = AdtReport.crisisId)
					TheReportedCrisis = RepotedCrises.first()
					/* PostF01 */
					TheReportedCrisis.vpReported = true
					/* PostF02 */ 
					NearPoliceHeadquarters = ThePoliceHeadquarters -> select (p : ctPoliceHeadquarter | (TheReportedCrisis.location).isNearTo(p.location))
					NearPoliceHeadquarters -> forAll (p : ctPoliceHeadquarter | p.rnInterfaceIN^ieSendReport(AdtReport))
			}
			
			postP {
				/* PostP01 */
				true
			}
			
		}
	}
}
