package icrash.operations.environment.actCoordinator.oeSetCrisisHandler {

import lu.uni.lassy.messir.libraries.primitives
import lu.uni.lassy.messir.libraries.math
import lu.uni.lassy.messir.libraries.string
import lu.uni.lassy.messir.libraries.calendar

import icrash.concepts.primarytypes.datatypes
import icrash.concepts.primarytypes.classes
import icrash.concepts.secondarytypes.datatypes
import icrash.environment

Operation Model {

operation: actCoordinator.outactCoordinator.oeSetCrisisHandler(AdtCrisisID:dtCrisisID):ptBoolean{
preP {
  let
  	TheSystem : ctState,
  	TheActor : actAuthenticated
  in
  	TheSystem = self.rnActor.rnSystem
  	TheActor = self.rnActor 
  
    /* PreP01 */
    TheSystem.vpStarted = true
	/* PreP02 */
	TheActor.rnctAuthenticated.vpIsLogged = true 
}
preF {
	let 
    	TheSystem : ctState,
    	TheCoordinator : ctCoordinator,
		TheCrises : Set(ctCrisis),
		TheTargetCrisis : Set(ctCrisis)
	in
		TheSystem = self.rnActor.rnSystem
		TheCoordinator = self.rnActor
		TheCrises = TheSystem.rnctCrisis
		/* PreF01 */
		TheTargetCrisis = TheCrises->select(c : ctCrisis | c.id = AdtCrisisID)
		TheTargetCrisis->size = 1
}
postF {
    let 
    	TheSystem : ctState,
		TheCoordinator : ctCoordinator,
		ThePrevCoordinator : Set(ctCoordinator),
		TheTargetCrisis : Set(ctCrisis),
		TheAlerts : Set(ctAlert),
		TheMessage : ptString,
		TheMessage2: ptString
	in
		TheSystem = self.rnActor.rnSystem 
		TheCoordinator = self.rnActor
		TheAlerts = TheSystem.rnctAlert		
		TheTargetCrisis = TheSystem.rnctCrisis->select(c : ctCrisis | c.id = AdtCrisisID
																   	  and c.isSentToCoordinator(TheCoordinator)) //check
		/* PostF01 */
		TheTargetCrisis->first@post.status = "handled"
		TheMessage = 'The crisis with ID: '.ptStringConcat(TargetCrisis->first.id).'is handled by you.'
		TheCoordinator.rnInterfaceIN^ieMessage(TheMessage)
		/* PostF02 */
		TheAlerts->forAll(a : ctAlert | a.rnTheCrisis = TheTargetCrisis->first
								and a.rnTheCrisis.rnHandler = TheCoordinator
								and TheCoordinator.rnInterfaceIN^isSendAnAlert(a))
		/* PostF03 */
		ThePrevCoordinator = TheTargetCrisis->first.rnHandler
		if (ThePrevCoordinator.isEmpty())
		then (true)
		else (TheMessage2 = 'The crisis having ID: '.ptStringConcat(TheTargetCrisis->first.id).' changed handler coordinator.'
			 and ThePrevCoordinator->first.rnInterfaceIN^ieMessage(TheMessage2))
		endif
		/* PostF04 */
		TheAlerts->forAll(a : ctAlert | a.rnTheCrisis = TheTargetCrisis->first
						and a.rnSignaler->forAll(h : ctHuman | 
							h.rnactComCompany.rnInterfaceIN^ieSmsSend(h.id, ('The alert with id '.ptStringConcat(a.id).' is being handled.'))))
}
postP {
	/* PostP01 */
	true
}
prolog{"src/Operations/Environment/OUT/outactCoordinator-oeSetCrisisHandler.pl"}
}

}
}